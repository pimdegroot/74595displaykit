
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 527434de, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `main.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: main.v
Parsing Verilog input from `main.v' to AST representation.
Generating RTLIL representation for module `\top'.
Warning: Replacing memory \framebuffer with list of registers. See main.v:94
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json main.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top

2.2.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 2 dead cases from process $proc$main.v:56$5 in module top.
Marked 4 switch rules as full_case in process $proc$main.v:56$5 in module top.
Removed a total of 2 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 7 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$proc$main.v:34$28'.
  Set init value: \update = 1'0
Found init rule in `\top.$proc$main.v:29$26'.
  Set init value: \commitrow = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$main.v:34$28'.
Creating decoders for process `\top.$proc$main.v:33$27'.
Creating decoders for process `\top.$proc$main.v:29$26'.
Creating decoders for process `\top.$proc$main.v:56$5'.
     1/16: $2$mem2reg_rd$\framebuffer$main.v:80$1_DATA[7:0]$15
     2/16: $1$mem2reg_rd$\framebuffer$main.v:80$1_DATA[7:0]$12
     3/16: $1$mem2reg_rd$\framebuffer$main.v:80$1_ADDR[1:0]$11
     4/16: $0\commitrow[0:0]
     5/16: $0\OE[0:0]
     6/16: $0\LAT[0:0]
     7/16: $1\line[3:0]
     8/16: $0\framebuffer[3][7:0]
     9/16: $0\framebuffer[2][7:0]
    10/16: $0\framebuffer[1][7:0]
    11/16: $0\framebuffer[0][7:0]
    12/16: $0\update[0:0]
    13/16: $0\columncounter[3:0]
    14/16: $0\linebuffer[7:0]
    15/16: $0\linecounter[1:0]
    16/16: $0\SER[0:0]
Creating decoders for process `\top.$proc$main.v:52$3'.

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\lfsr' from process `\top.$proc$main.v:33$27'.

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\OE' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$224' with positive edge clock.
Creating register for signal `\top.\LAT' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\top.\SER' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\top.\line' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\top.\linecounter' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$228' with positive edge clock.
Creating register for signal `\top.\linebuffer' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$229' with positive edge clock.
Creating register for signal `\top.\columncounter' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$230' with positive edge clock.
Creating register for signal `\top.\commitrow' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$231' with positive edge clock.
Creating register for signal `\top.\update' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$232' with positive edge clock.
Creating register for signal `\top.\framebuffer[0]' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$233' with positive edge clock.
Creating register for signal `\top.\framebuffer[1]' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$234' with positive edge clock.
Creating register for signal `\top.\framebuffer[2]' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$235' with positive edge clock.
Creating register for signal `\top.\framebuffer[3]' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$236' with positive edge clock.
Creating register for signal `\top.$mem2reg_rd$\framebuffer$main.v:80$1_ADDR' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$237' with positive edge clock.
Creating register for signal `\top.$mem2reg_rd$\framebuffer$main.v:80$1_DATA' using process `\top.$proc$main.v:56$5'.
  created $dff cell `$procdff$238' with positive edge clock.
Creating register for signal `\top.\slowdowncounter' using process `\top.$proc$main.v:52$3'.
  created $dff cell `$procdff$239' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$main.v:34$28'.
Removing empty process `top.$proc$main.v:33$27'.
Removing empty process `top.$proc$main.v:29$26'.
Found and cleaned up 6 empty switches in `\top.$proc$main.v:56$5'.
Removing empty process `top.$proc$main.v:56$5'.
Removing empty process `top.$proc$main.v:52$3'.
Cleaned up 6 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~10 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 5 unused cells and 50 unused wires.
<suppressed ~6 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$163.
Removed 1 multiplexer ports.
<suppressed ~13 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$main.v:53$4 ($add).
Removed top 9 bits (of 32) from port Y of cell top.$add$main.v:53$4 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$main.v:78$13 ($add).
Removed top 30 bits (of 32) from port Y of cell top.$add$main.v:78$13 ($add).
Removed top 30 bits (of 32) from port B of cell top.$add$main.v:80$14 ($add).
Removed top 30 bits (of 32) from port Y of cell top.$add$main.v:80$14 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$main.v:86$17 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$add$main.v:86$17 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$main.v:97$24 ($add).
Removed top 24 bits (of 32) from port Y of cell top.$add$main.v:97$24 ($add).
Removed top 1 bits (of 2) from port B of cell top.$procmux$161_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$procmux$183_CMP0 ($eq).
Removed top 30 bits (of 32) from wire top.$add$main.v:78$13_Y.
Removed top 30 bits (of 32) from wire top.$add$main.v:80$14_Y.
Removed top 24 bits (of 32) from wire top.$add$main.v:97$24_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$main.v:53$4 ($add).
  creating $macc model for $add$main.v:78$13 ($add).
  creating $macc model for $add$main.v:80$14 ($add).
  creating $macc model for $add$main.v:86$17 ($add).
  creating $macc model for $add$main.v:97$24 ($add).
  creating $alu model for $macc $add$main.v:97$24.
  creating $alu model for $macc $add$main.v:86$17.
  creating $alu model for $macc $add$main.v:80$14.
  creating $alu model for $macc $add$main.v:78$13.
  creating $alu model for $macc $add$main.v:53$4.
  creating $alu cell for $add$main.v:53$4: $auto$alumacc.cc:485:replace_alu$243
  creating $alu cell for $add$main.v:78$13: $auto$alumacc.cc:485:replace_alu$246
  creating $alu cell for $add$main.v:80$14: $auto$alumacc.cc:485:replace_alu$249
  creating $alu cell for $add$main.v:86$17: $auto$alumacc.cc:485:replace_alu$252
  creating $alu cell for $add$main.v:97$24: $auto$alumacc.cc:485:replace_alu$255
  created 5 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.line as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod$constmap:cd83258c7586f89dea16c95441ac2e41d2389dcc$paramod$ffca94839e09688bcf44d0a9a2a66b650905a113\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=23\Y_WIDTH=23 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~566 debug messages>

2.32. Executing ICE40_OPT pass (performing simple optimizations).

2.32.1. Running ICE40 specific optimizations.

2.32.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~122 debug messages>

2.32.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

2.32.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 50 unused cells and 184 unused wires.
<suppressed ~51 debug messages>

2.32.6. Rerunning OPT passes. (Removed registers in this run.)

2.32.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$243.slice[0].fadd: CO=\slowdowncounter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$252.slice[0].fadd: CO=\columncounter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$255.slice[0].fadd: CO=\framebuffer[0] [0]

2.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.32.12. Rerunning OPT passes. (Removed registers in this run.)

2.32.13. Running ICE40 specific optimizations.

2.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.32.18. Finished OPT passes. (There is nothing left to do.)

2.33. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$555 to $_DFFE_PP_ for $0\SER[0:0] -> \SER.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$560 to $_DFFE_PP_ for $0\linecounter[1:0] [0] -> \linecounter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$561 to $_DFFE_PP_ for $0\linecounter[1:0] [1] -> \linecounter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$562 to $_DFFE_PP_ for $0\linebuffer[7:0] [0] -> \linebuffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$563 to $_DFFE_PP_ for $0\linebuffer[7:0] [1] -> \linebuffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$564 to $_DFFE_PP_ for $0\linebuffer[7:0] [2] -> \linebuffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$565 to $_DFFE_PP_ for $0\linebuffer[7:0] [3] -> \linebuffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$566 to $_DFFE_PP_ for $0\linebuffer[7:0] [4] -> \linebuffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$567 to $_DFFE_PP_ for $0\linebuffer[7:0] [5] -> \linebuffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$568 to $_DFFE_PP_ for $0\linebuffer[7:0] [6] -> \linebuffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$569 to $_DFFE_PP_ for $0\linebuffer[7:0] [7] -> \linebuffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$570 to $_DFFE_PP_ for $0\columncounter[3:0] [0] -> \columncounter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$571 to $_DFFE_PP_ for $0\columncounter[3:0] [1] -> \columncounter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$572 to $_DFFE_PP_ for $0\columncounter[3:0] [2] -> \columncounter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$573 to $_DFFE_PP_ for $0\columncounter[3:0] [3] -> \columncounter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$575 to $_DFFE_PP_ for $0\update[0:0] -> \update.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$576 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [0] -> \framebuffer[0] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$577 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [1] -> \framebuffer[0] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$578 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [2] -> \framebuffer[0] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$579 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [3] -> \framebuffer[0] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$580 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [4] -> \framebuffer[0] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$581 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [5] -> \framebuffer[0] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$582 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [6] -> \framebuffer[0] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$583 to $_DFFE_PP_ for $0\framebuffer[0][7:0] [7] -> \framebuffer[0] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$584 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [0] -> \framebuffer[1] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$585 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [1] -> \framebuffer[1] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$586 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [2] -> \framebuffer[1] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$587 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [3] -> \framebuffer[1] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$588 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [4] -> \framebuffer[1] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$589 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [5] -> \framebuffer[1] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$590 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [6] -> \framebuffer[1] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$591 to $_DFFE_PP_ for $0\framebuffer[1][7:0] [7] -> \framebuffer[1] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$592 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [0] -> \framebuffer[2] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$593 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [1] -> \framebuffer[2] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$594 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [2] -> \framebuffer[2] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$595 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [3] -> \framebuffer[2] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$596 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [4] -> \framebuffer[2] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$597 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [5] -> \framebuffer[2] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$598 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [6] -> \framebuffer[2] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$599 to $_DFFE_PP_ for $0\framebuffer[2][7:0] [7] -> \framebuffer[2] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$600 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [0] -> \framebuffer[3] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$601 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [1] -> \framebuffer[3] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$602 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [2] -> \framebuffer[3] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$603 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [3] -> \framebuffer[3] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$604 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [4] -> \framebuffer[3] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$605 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [5] -> \framebuffer[3] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$606 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [6] -> \framebuffer[3] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$607 to $_DFFE_PP_ for $0\framebuffer[3][7:0] [7] -> \framebuffer[3] [7].

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~77 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~158 debug messages>

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$243.slice[0].fadd ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$252.slice[0].fadd ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$255.slice[0].fadd ($lut).

2.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$574 (SB_DFF): \commitrow = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$575 (SB_DFFE): \update = 0

2.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$894 (A=1'0, B=$procmux$180.B_AND_S [9], S=$techmap$procmux$180.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$443_Y) into $auto$simplemap.cc:420:simplemap_dff$557 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$895 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$869, S=$techmap$procmux$180.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$443_Y) into $auto$simplemap.cc:420:simplemap_dff$558 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$896 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$865, S=$techmap$procmux$180.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$443_Y) into $auto$simplemap.cc:420:simplemap_dff$559 (SB_DFF).

2.40. Executing ICE40_OPT pass (performing simple optimizations).

2.40.1. Running ICE40 specific optimizations.

2.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~42 debug messages>

2.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~315 debug messages>
Removed a total of 105 cells.

2.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 565 unused wires.
<suppressed ~4 debug messages>

2.40.6. Rerunning OPT passes. (Removed registers in this run.)

2.40.7. Running ICE40 specific optimizations.

2.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.40.12. Finished OPT passes. (There is nothing left to do.)

2.41. Executing TECHMAP pass (map to technology primitives).

2.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.41.2. Continuing TECHMAP pass.
No more expansions possible.

2.42. Executing ABC pass (technology mapping using ABC).

2.42.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 96 gates and 147 wires to a netlist network with 50 inputs and 24 outputs.

2.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      24.
ABC: Participating nodes from both networks       =      63.
ABC: Participating nodes from the first network   =      24. (  63.16 % of nodes)
ABC: Participating nodes from the second network  =      39. ( 102.63 % of nodes)
ABC: Node pairs (any polarity)                    =      24. (  63.16 % of names can be moved)
ABC: Node pairs (same polarity)                   =      24. (  63.16 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       37
ABC RESULTS:        internal signals:       73
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       24
Removing temp directory.

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
Using template $paramod\$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110 for cells of type $__ICE40_CARRY_WRAPPER.
No more expansions possible.
<suppressed ~43 debug messages>
Removed 9 unused cells and 338 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       67
  1-LUT                6
  2-LUT               10
  3-LUT               27
  4-LUT               24
  with \SB_CARRY      27

Eliminating LUTs.
Number of LUTs:       67
  1-LUT                6
  2-LUT               10
  3-LUT               27
  4-LUT               24
  with \SB_CARRY      27

Combining LUTs.
Number of LUTs:       67
  1-LUT                6
  2-LUT               10
  3-LUT               27
  4-LUT               24
  with \SB_CARRY      27

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~265 debug messages>

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Generating RTLIL representation for module `\$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
No more expansions possible.
<suppressed ~275 debug messages>
Removed 0 unused cells and 134 unused wires.

2.46. Executing AUTONAME pass.
Renamed 1397 objects in module top (19 iterations).
<suppressed ~200 debug messages>

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:                 57
   Number of wire bits:            203
   Number of public wires:          57
   Number of public wire bits:     203
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                169
     SB_CARRY                       27
     SB_DFF                         24
     SB_DFFE                        48
     SB_DFFSR                        3
     SB_LUT4                        67

2.49. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.50. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 74478a8d3f
CPU: user 0.62s system 0.02s, MEM: 50.73 MB total, 17.34 MB resident
Yosys 0.9+932 (git sha1 527434de, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 27% 11x read_verilog (0 sec), 13% 7x techmap (0 sec), ...
